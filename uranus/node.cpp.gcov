		/***************************************************************************
		                          node.cpp  -  description
		                             -------------------
		    begin                : Tue Jul 23 2002
		    copyright            : (C) 2002 by Marco Bubke
		    email                : marco@bubke.de
		 ***************************************************************************/
		
		/***************************************************************************
		 *                                                                         *
		 *   This program is free software; you can redistribute it and/or modify  *
		 *   it under the terms of the GNU Lesser General Public License as        *
		 *   published by the Free Software Foundation; 2.1 of the License.        *
		 *                                                                         *                                                                         *
		 ***************************************************************************/
		
		#include "node.h"
		#include "exceptions.h"
		#include "group.h"
		
		
		
		namespace Ah {
		
		
		
		Node::Node()
       10001    	: Element(), matrix(0), shader(0), displaylist(0),
		    	cached(false)
       10001    {
		}
		
		//! \todo Implement the destructor right
		Node::~Node()
      ######    {
      ######    	if(matrix) matrix->unref();
      ######        if(shader) shader->unref();
      ######    }
		
		/*!
			predraw() pushes the matrix stack one up and than multiplay the node node matrix with the
		    matrixstack. After that it sets a display list on, if possible.
		*/
		void Node::predraw()
		{
     2320000    	pushMultiplyMatrix();
     2320000    	beginSelection();
		}
		
		/*!
			postdraw() calls the displaylist if possible, sets the cache state true, pops the
		    matrix off the stack and
		    calls the draw() function of the next node.
		*/
		
		void Node::postdraw()
     2320000    {
     2320000    	endSelection();
     2320000    	popMatrix();
     2320000        if(!isDrawingStopped())
     2320000    		getNext()->draw();
		}
		
		
		void Node::beginList()
     2320000    {
     2320000        if(!cached)
       10000        	if(displaylist)
		     	{
      ######        		glNewList(displaylist, GL_COMPILE_AND_EXECUTE);
      ######                generateList = true;
		      	}
				else
		        {
       10000    			displaylist = glGenLists(1);
       10000            	if(displaylist)
		            {
       10000    				glNewList(displaylist, GL_COMPILE_AND_EXECUTE);
       10000    				generateList = true;
		    		}
		    	}
		    else
     2310000        	if(!displaylist)
		    	{
      ######    			displaylist = glGenLists(1);
      ######            	if(displaylist)
		         	{
      ######    				glNewList(displaylist, GL_COMPILE_AND_EXECUTE);
      ######    				generateList = true;
		    		}
		    		else
      ######                	cached = false;
		    	}
		}
		
		void Node::endList()
     2320000    {
		
     2320000    	if(cached && displaylist)
     2310000        	glCallList(displaylist);
     2320000    	if(generateList)
		 	{
       10000        	glEndList();
       10000        	cached = true;
       10000    		generateList = false;
		    }
		}
		
		
		
		
		void Node::pushMultiplyMatrix()
     2320000    {
     2320000    	if(matrix) modelview->pushmultiply(matrix);
		}
		
		void Node::multiplyMatrix()
         232    {
         232    	if(matrix) modelview->multiply(matrix);
		}
		
		void Node::popMatrix()
     2320000    {
     2320000    	if(matrix) modelview->pop();
		}
		
		Matrix* Node::getMatrix()
       10189    {
       10189    	if(!matrix) matrix = new Matrix();
       10189        matrix->ref();
       10189    	return matrix;
		}
		
		Shader* Node::getShader()
       10000    {
       10000    	if(shader) return shader;
      ######        if(getParent()) 
		    	{
      ######            Node* node = dynamic_cast<Node*>(getParent());
      ######            if(node)
      ######            	node->getShader();
		        }
      ######        throw NoShader();
		
		}
		
		void Node::setMatrix(Matrix* newmatrix)
      ######    {
      ######    	newmatrix->ref();
      ######        if(matrix) matrix->unref();
      ######        matrix = newmatrix;
		}
		
		void Node::setShader(Shader* newshader)
       10001    {
       10001    	newshader->ref();
       10001        if(shader) shader->unref();
       10001        shader = newshader;
		}
		
		void Node::setChanged()
      ######    {
      ######    	cached = false;
		}
		
		
		GLuint Node::getDisplayList()
      ######    {
      ######    	if(displaylist)
      ######        	return displaylist;
			else
      ######        	return displaylist = glGenLists(1);
		}
		
		};
